const fs = require('fs');
const path = require('path');
const { PDFDocument, rgb } = require('pdf-lib');

const forms = [
  {
    filename: 'new-patient-registration.pdf',
    title: 'New Patient Registration',
    fields: [
      'Full Name',
      'Date of Birth',
      'Gender',
      'Address',
      'Phone Number',
      'Email',
      'Emergency Contact',
      'Primary Care Physician',
      'Insurance Information',
    ],
  },
  {
    filename: 'medical-history.pdf',
    title: 'Medical History',
    fields: [
      'Medical Conditions',
      'Surgeries',
      'Allergies',
      'Current Medications',
      'Family Medical History',
      'Lifestyle Information',
    ],
  },
  {
    filename: 'consent-for-treatment.pdf',
    title: 'Consent for Treatment',
    fields: [
      'Patient Name',
      'Date of Birth',
      'Consent Statement',
      'Signature',
      'Date',
    ],
  },
  {
    filename: 'hipaa-privacy-notice.pdf',
    title: 'HIPAA Privacy Notice',
    fields: [
      'Patient Rights',
      'Uses and Disclosures',
      'Authorization',
      'Complaints',
    ],
  },
  {
    filename: 'insurance-information.pdf',
    title: 'Insurance Information',
    fields: [
      'Insurance Provider',
      'Policy Number',
      'Group Number',
      'Policy Holder Name',
      'Relationship to Patient',
    ],
  },
  {
    filename: 'medical-records-release.pdf',
    title: 'Medical Records Release',
    fields: [
      'Patient Name',
      'Date of Birth',
      'Records to be Released',
      'Recipient Information',
      'Purpose of Release',
      'Expiration Date',
      'Signature',
    ],
  },
];

async function generatePDF(form) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([600, 800]);
  const { width, height } = page.getSize();
  const fontSize = 24;
  const lineHeight = 30;
  
  // Add title
  page.drawText(form.title, {
    x: 50,
    y: height - 100,
    size: fontSize + 4,
    color: rgb(0, 0, 0.8),
  });
  
  // Add form fields
  form.fields.forEach((field, index) => {
    const y = height - 150 - (index * lineHeight);
    
    // Field label
    page.drawText(`${field}:`, {
      x: 50,
      y,
      size: fontSize - 4,
      color: rgb(0, 0, 0.6),
    });
    
    // Field underline
    page.drawLine({
      start: { x: 50, y: y - 5 },
      end: { x: width - 50, y: y - 5 },
      thickness: 1,
      color: rgb(0, 0, 0.8),
    });
  });
  
  // Add footer
  page.drawText('Generated by Dr. Kishori Raut Clinic', {
    x: 50,
    y: 50,
    size: fontSize - 8,
    color: rgb(0, 0, 0.5),
  });
  
  // Save the PDF
  const pdfBytes = await pdfDoc.save();
  const outputPath = path.join(__dirname, '..', 'public', 'forms', form.filename);
  fs.writeFileSync(outputPath, pdfBytes);
}

async function generateAllPDFs() {
  // Create forms directory if it doesn't exist
  const formsDir = path.join(__dirname, '..', 'public', 'forms');
  if (!fs.existsSync(formsDir)) {
    fs.mkdirSync(formsDir, { recursive: true });
  }
  
  // Generate all PDFs
  for (const form of forms) {
    await generatePDF(form);
    console.log(`Generated ${form.filename}`);
  }
}

generateAllPDFs().catch(console.error);
